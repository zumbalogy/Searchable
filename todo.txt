show example using aliases to support commas in numbers
/#{word_break}[,\d]+#{word_break}/ => -> (match) { match.tr(',', '') }
or something. that does not validate commas being every 3. maybe:
/(?<=\d),\d\d\d/

look into
Even with existence boolean, this should maybe check that the existing value is not false.
in mongoer.rb, memory.rb might need that too.

consider making it so people can search emoji without quotes.
parse(':)').should == ...
parse('(: smile').should == ...
need to decompose unmatched parens to strings.

Make sure the aliaser (and rest of command search) plays friendly with pagination for mongo and in memory.

Aliaser, currently string alaises wont match halves of command. should be thought about and noted somewhere.
'red' => 'blue',
a('house:red').should == 'house:red'

maybe support a real regex type. using that could mean certain things are not needed.

consider only loading chronic if user uses time types

it could be nice to be able to have an alias where the proper
name is off limits.

support arrays (and maybe other nesting/relations)

One potential future feature (besides more customizable syntax and all)
would be to be able to specify a certain number of matches. like,
this name field must have the string ":)" 3 times. having
an option to pass though to real regexes might solve this.

it might be good to have a way to tell "collection" types (paren, or, minus)
from other nest types (compare and command) in the ast, to avoid code like
    [:paren, :pipe, :minus].include?(x[:nest_type])

chronic thinks that "2000" means 20:20 today, not year 2000.
look into having date type for colons, not just compares
so, then, it would be nice if "foo:monday" matched any date on a monday, not just like this monday.

release notes?

maybe break out technical details into its own file in doc folder
